{"source_code":"https://bitbucket.org/j_picone/background-processing","short_description":"Addon to handle some resources for unloaded vessels and provide modded parts the ability to perform processing on unloaded vessels.","license":"MIT","bg_offset_y":null,"description_html":"<p>BackgroundProcessing is a small and simple mod that performs some processing for vessels 'in the background' - probes or manned craft that have been left orbiting while the player is in the Kerbal Space Center or piloting another vessel.</p>\n<p><strong>Installation</strong></p>\n<ul>\n<li>Download the BackgroundProcessing.zip file from here</li>\n<li>Extract it to your GameData folder</li>\n</ul>\n<p><strong>I'm a player. What does BackgroundProcessing offer me?</strong></p>\n<p>BackgroundProcessing will allow craft to gain and lose ElectricCharge while you're off doing something else. This doesn't actually happen in stock KSP - try building a spaceship made up of an empty battery, an RTG, and some wheels (to get it off the launchpad). Move it off the launchpad, check resources, notice that it's gaining charge over time. Then leave it and go back to the space center and speed up time. Check the craft again, and it won't have gained or lost any charge. That's a minor realism issue, but its nice to have fixed.</p>\n<p>The other thing BackgroundProcessing provides is support for other mods that might want to do something while a craft is in the background. A scanner, something that produces a mod-specific resource, anything like that. Because of the way BackgroundProcessing is designed that other mod doesn't have to include BP, and it doesn't have to use its features, but if that mod has implemented BP-compatibility, BP will detect it and use it.</p>\n<p><strong>I'm a mod author. What does BackgroundProcessing offer me?</strong></p>\n<p>If you have a PartModule that should do stuff even while a craft isn't the actual active vessel - like a scanner, or a solar-wind collector - you can get background processing just by implementing a couple of functions. BackgroundProcessing has already implemented a lot of the boilerplate required to get this working. Your PartModule can do anything in the background that can be done with a ProtoVessel - which is quite a lot - and BP provides some mechanisms for producing or consuming resources easily. BP also allows mods to indicate that some mod-specific resource should be handled in the background, and then any ModuleGenerator or ModuleDeployableSolarPanel that produces that resource (with no resource consumed) will produce it in the background. Additionally, any ModuleCommand that consumes that resource will consume it in the background. All of this can be done without reference to the BackgroundProcessing assembly, so your users can choose whether or not they want background handling, and you don't have to package BP with your mod.</p>\n<p>BackgroundProcessing is MIT-licensed, so there aren't any license worries.</p>\n<p><strong>What specific things are handled?</strong></p>\n<p>Any Part using the ModuleGenerator or ModuleDeployableSolarPanel to produce ElectricCharge with no inputs, any Part using ModuleComand to consume ElectricCharge. At present ModuleDeployableSolarPanel output charge takes into account the location of Kerbol, its power curve, planetary shadows, and panel orientation, including tracking solar panels.</p>\n<p>Mods can instruct BackgroundProcessing that particular PartModule classes should be considered to produce or consume some resource at a given rate. They can also have BackgroundProcessing handle ModuleGenerator/ModuleDeployableSolarPanel/ModuleCommand that produces/consumes resources other than ElectricCharge. Finally, their background handling code can consume or produce any resource they please.</p>\n<p><strong>How do I get BackgroundProcessing support in my PartModule?</strong></p>\n<p>Implement some static functions in your PartModule.</p>\n<p><code>public static void FixedBackgroundUpdate(Vessel v, uint partFlightID, ref System.Object data)</code></p>\n<p><code>public static void FixedBackgroundUpdate(Vessel v, uint partFlightID, Func&lt;Vessel, float, string, float&gt; resourceRequest, ref System.Object data)</code></p>\n<p>These two functions are the 'simple' and 'complex' background update functions. If you implement either of them, BackgroundProcessing will call it at FixedUpdate() intervals (if you implement both, only the complex version will get called). The function will only be called for unloaded vessels, and it will be called once per part per partmodule type - so if you have more than one of the same PartModule on the same part you'll only get one update for all of those PartModules. <code>Vessel v</code> is the Vessel object that you should update - be careful, it's quite likely unloaded and very little of it is there. <code>partFlightID</code> is the flightID of the part this update was associated with. <code>resourceRequest</code> is a function that provides an analog of Part.RequestResource. It takes a vessel, an amount of resource to take, and a resource name, and returns the amount of resource that you got. Like Part.RequestResource, you can ask for a negative amount of some resource to fill up the tanks. The resource is consumed as if it can be reached from the entire vessel - be very careful with resources like liquid fuel that should only flow through crossfeeds. <code>data</code> is arbitrary per-part-per-partmodule-type storage - you can stash anything you want there, and it will persist between FixedBackgroundUpdate calls.</p>\n<p><code>public static void BackgroundLoad(Vessel v, uint partFlightId, ref System.Object data)</code></p>\n<p>This function will be called once prior to FixedBackgroundUpdate, and it gives you a chance to load data out of the ConfigNodes on the vessel's protovessel into the storage BackgroundProcessing manages for you.</p>\n<p><code>public static void BackgroundSave(Vessel v, uint partFlightId, System.Object data)</code></p>\n<p>This function will be called prior to the game scene changing or the game otherwise being saved. Use it to persist background data to the vessel's confignodes. Note that <code>System.Object data</code> is <em>not</em> a ref type here, unlike the other times it is used.</p>\n<p><code>public static List&lt;string&gt; GetInterestingResources()</code></p>\n<p>Implement this function to return a list of resources that your PartModule would like BackgroundProcessing to handle in the background. It's okay if multiple PartModules say a given resource is interesting.</p>\n<p><code>public static int GetBackgroundResourceCount()</code></p>\n<p><code>public static void GetBackgroundResource(int index, out string resourceName, out float resourceRate)</code></p>\n<p>Implement these functions to inform BackgroundProcessing that your PartModule should be considered to produce or consume a resource in the background. GetBackgroundResourceCount() should return the number of different resources that your PartModule produces/consumes. GetBackgroundResource() will then be called with each index from 0 up to one less than the count you indicated, and you should set resourceName and resourceRate to the appropriate values for the index-th resource your PartModule produces. resourceRate is the amount of resource your part should produce each second - if your part consumes resources, it should be negative. If your part only consumes or produces resources in some situation, it's better to implement the complex background update and use the resource request function.</p>\n<p><strong>How do I distribute a mod that uses BackgroundProcessing?</strong>\nHaving multiple copies of the BackgroundProcessing DLL in a GameData directory is fine - only the most recent version will run. If your mod absolutely needs BackgroundProcessing present to be useful, consider including the BackgroundProcessing DLL in your mod's zip file, the same way ModuleManager is handled.</p>\n<p>If BackgroundProcessing isn't central to your mod, feel free not to distribute it at all. If players don't have this mod installed, they just won't get your off-rails features.</p>\n<p><strong>Are there any caveats when writing code that uses BackgroundProcessing?</strong>\nBackgroundProcessing works optimally with PartModules that are present in prefab parts. The list of modules that has BackgroundProcessing handling is constructed by walking all the AvailablePart objects in PartLoader.LoadedPartLists at the main menu. If your partmodule isn't in that set, very little will work. Similarly, if your PartModule is added to a part's module list after part instantiation, and isn't present in the part's prefab module list, resource handling will likely not work. This is all only relevant if your PartModule is added dynamically to parts, after construction. It isn't relevant to PartModules that are present in config files, or to PartModules added by ModuleManager (which appropriately modifies prefab parts). The takeaway is that if you intend to dynamically add PartModules to parts, and those dynamically-added PartModules should have BackgroundProcessing behaviour, make sure you add them to the appropriate part prefab before the main menu, like ModuleManager.</p>","versions":[{"download_path":"/mod/302/BackgroundProcessing/download/0.4.0.1","ksp_version":"0.90","id":2071,"friendly_version":"0.4.0.1","changelog":"- Fix breaking the complex FixedBackgroundUpdate in 0.4.0.0"},{"download_path":"/mod/302/BackgroundProcessing/download/0.4.0.0","ksp_version":"0.90","id":2058,"friendly_version":"0.4.0.0","changelog":"- Change the background handling so that partmodules get some storage they can hold onto.\r\n- This is a breaking change."},{"download_path":"/mod/302/BackgroundProcessing/download/0.3.5.2","ksp_version":"0.90","id":2023,"friendly_version":"0.3.5.2","changelog":"- Fixed a crash bug when multiple parts had a PartModule with a background update function (Thanks FlowerChild)"},{"download_path":"/mod/302/BackgroundProcessing/download/0.3.5.1","ksp_version":"0.90","id":1989,"friendly_version":"0.3.5.1","changelog":"- Fix to resource generation rates (Thanks JDP)\r\n- Fixed a bug that sometimes prevented ModuleGenerators being loaded for backgrounded vessels."},{"download_path":"/mod/302/BackgroundProcessing/download/0.3.5","ksp_version":"0.90","id":1535,"friendly_version":"0.3.5","changelog":"- Fix a memory leak that occurred when changing scenes\r\n- More fiddling with only-one-assembly code."},{"download_path":"/mod/302/BackgroundProcessing/download/0.3.2","ksp_version":"0.90","id":1383,"friendly_version":"0.3.2","changelog":"- Compiled against KSP 0.90, is compatible."},{"download_path":"/mod/302/BackgroundProcessing/download/0.3.1","ksp_version":"0.25","id":1314,"friendly_version":"0.3.1","changelog":"- Some changes to the way multiple-DLLs are handled\r\n- Quick-and-dirty patch to prevent null module names or resource names crashing repeatedly."},{"download_path":"/mod/302/BackgroundProcessing/download/0.3.0","ksp_version":"0.25","id":1306,"friendly_version":"0.3.0","changelog":"- Slight changes to PartModule discovery on protovessels\r\n- Add some code so only one copy of the BackgroundProcessing module will actually run, and it's always the most recent version."},{"download_path":"/mod/302/BackgroundProcessing/download/0.2.7","ksp_version":"0.25","id":1266,"friendly_version":"0.2.7","changelog":"- Fix NRE flood sometimes caused by flags or EVA kerbals."},{"download_path":"/mod/302/BackgroundProcessing/download/0.2.6","ksp_version":"0.25","id":1242,"friendly_version":"0.2.6","changelog":"- Add slightly more log messages and a missing null check in GetVesselData()"},{"download_path":"/mod/302/BackgroundProcessing/download/0.2.5","ksp_version":"0.25","id":1236,"friendly_version":"0.2.5","changelog":"- Change method used to find matching PartModule for a given ProtoPartModuleSnapshot to be more like stock KSP."},{"download_path":"/mod/302/BackgroundProcessing/download/0.2.4","ksp_version":"0.25","id":1103,"friendly_version":"0.2.4","changelog":"- Only send background updates for unloaded vessels. Packed vessels still receive fixedupdate\r\n- Only send one update per module callback per part. There's no way to distinguish which module on a part sent which update - better to have mod authors handle all modules of a given type for one part."},{"download_path":"/mod/302/BackgroundProcessing/download/0.2.3","ksp_version":"0.25","id":941,"friendly_version":"0.2.3","changelog":"* Fix calculation of tracking solar panel background power output."},{"download_path":"/mod/302/BackgroundProcessing/download/0.2.2","ksp_version":"0.25","id":940,"friendly_version":"0.2.2","changelog":"* Now handles solar-panel orientation when doing background resource handling. Tracking solar panels don't produce as much as they should when backgrounded with this update, not sure why, working on it."},{"download_path":"/mod/302/BackgroundProcessing/download/0.21","ksp_version":"0.25","id":937,"friendly_version":"0.21","changelog":"* Better handling for solar panels - now their power curve is taken into account, as well as whether or not they can see Kerbol. Orientation still isn't considered (and is decidedly nontrivial).\r\n* Some bugfixes."},{"download_path":"/mod/302/BackgroundProcessing/download/0.2","ksp_version":"0.25","id":934,"friendly_version":"0.2","changelog":null}],"name":"BackgroundProcessing","id":302,"url":"/mod/302/BackgroundProcessing","downloads":38234,"donations":"","background":null,"author":"jamespicone","website":"","followers":110,"default_version_id":2071,"description":"BackgroundProcessing is a small and simple mod that performs some processing for vessels 'in the background' - probes or manned craft that have been left orbiting while the player is in the Kerbal Space Center or piloting another vessel.\r\n\r\n**Installation**\r\n\r\n* Download the BackgroundProcessing.zip file from here\r\n* Extract it to your GameData folder\r\n\r\n**I'm a player. What does BackgroundProcessing offer me?**\r\n\r\nBackgroundProcessing will allow craft to gain and lose ElectricCharge while you're off doing something else. This doesn't actually happen in stock KSP - try building a spaceship made up of an empty battery, an RTG, and some wheels (to get it off the launchpad). Move it off the launchpad, check resources, notice that it's gaining charge over time. Then leave it and go back to the space center and speed up time. Check the craft again, and it won't have gained or lost any charge. That's a minor realism issue, but its nice to have fixed.\r\n\r\nThe other thing BackgroundProcessing provides is support for other mods that might want to do something while a craft is in the background. A scanner, something that produces a mod-specific resource, anything like that. Because of the way BackgroundProcessing is designed that other mod doesn't have to include BP, and it doesn't have to use its features, but if that mod has implemented BP-compatibility, BP will detect it and use it.\r\n\r\n**I'm a mod author. What does BackgroundProcessing offer me?**\r\n\r\nIf you have a PartModule that should do stuff even while a craft isn't the actual active vessel - like a scanner, or a solar-wind collector - you can get background processing just by implementing a couple of functions. BackgroundProcessing has already implemented a lot of the boilerplate required to get this working. Your PartModule can do anything in the background that can be done with a ProtoVessel - which is quite a lot - and BP provides some mechanisms for producing or consuming resources easily. BP also allows mods to indicate that some mod-specific resource should be handled in the background, and then any ModuleGenerator or ModuleDeployableSolarPanel that produces that resource (with no resource consumed) will produce it in the background. Additionally, any ModuleCommand that consumes that resource will consume it in the background. All of this can be done without reference to the BackgroundProcessing assembly, so your users can choose whether or not they want background handling, and you don't have to package BP with your mod.\r\n\r\nBackgroundProcessing is MIT-licensed, so there aren't any license worries.\r\n\r\n**What specific things are handled?**\r\n\r\nAny Part using the ModuleGenerator or ModuleDeployableSolarPanel to produce ElectricCharge with no inputs, any Part using ModuleComand to consume ElectricCharge. At present ModuleDeployableSolarPanel output charge takes into account the location of Kerbol, its power curve, planetary shadows, and panel orientation, including tracking solar panels.\r\n\r\nMods can instruct BackgroundProcessing that particular PartModule classes should be considered to produce or consume some resource at a given rate. They can also have BackgroundProcessing handle ModuleGenerator/ModuleDeployableSolarPanel/ModuleCommand that produces/consumes resources other than ElectricCharge. Finally, their background handling code can consume or produce any resource they please.\r\n\r\n**How do I get BackgroundProcessing support in my PartModule?**\r\n\r\nImplement some static functions in your PartModule.\r\n\r\n`public static void FixedBackgroundUpdate(Vessel v, uint partFlightID, ref System.Object data)`\r\n\r\n`public static void FixedBackgroundUpdate(Vessel v, uint partFlightID, Func<Vessel, float, string, float> resourceRequest, ref System.Object data)`\r\n\r\nThese two functions are the 'simple' and 'complex' background update functions. If you implement either of them, BackgroundProcessing will call it at FixedUpdate() intervals (if you implement both, only the complex version will get called). The function will only be called for unloaded vessels, and it will be called once per part per partmodule type - so if you have more than one of the same PartModule on the same part you'll only get one update for all of those PartModules. `Vessel v` is the Vessel object that you should update - be careful, it's quite likely unloaded and very little of it is there. `partFlightID` is the flightID of the part this update was associated with. `resourceRequest` is a function that provides an analog of Part.RequestResource. It takes a vessel, an amount of resource to take, and a resource name, and returns the amount of resource that you got. Like Part.RequestResource, you can ask for a negative amount of some resource to fill up the tanks. The resource is consumed as if it can be reached from the entire vessel - be very careful with resources like liquid fuel that should only flow through crossfeeds. `data` is arbitrary per-part-per-partmodule-type storage - you can stash anything you want there, and it will persist between FixedBackgroundUpdate calls.\r\n\r\n`public static void BackgroundLoad(Vessel v, uint partFlightId, ref System.Object data)`\r\n\r\nThis function will be called once prior to FixedBackgroundUpdate, and it gives you a chance to load data out of the ConfigNodes on the vessel's protovessel into the storage BackgroundProcessing manages for you.\r\n\r\n`public static void BackgroundSave(Vessel v, uint partFlightId, System.Object data)`\r\n\r\nThis function will be called prior to the game scene changing or the game otherwise being saved. Use it to persist background data to the vessel's confignodes. Note that `System.Object data` is *not* a ref type here, unlike the other times it is used.\r\n\r\n`public static List<string> GetInterestingResources()`\r\n\r\nImplement this function to return a list of resources that your PartModule would like BackgroundProcessing to handle in the background. It's okay if multiple PartModules say a given resource is interesting.\r\n\r\n`public static int GetBackgroundResourceCount()`\r\n\r\n`public static void GetBackgroundResource(int index, out string resourceName, out float resourceRate)`\r\n\r\nImplement these functions to inform BackgroundProcessing that your PartModule should be considered to produce or consume a resource in the background. GetBackgroundResourceCount() should return the number of different resources that your PartModule produces/consumes. GetBackgroundResource() will then be called with each index from 0 up to one less than the count you indicated, and you should set resourceName and resourceRate to the appropriate values for the index-th resource your PartModule produces. resourceRate is the amount of resource your part should produce each second - if your part consumes resources, it should be negative. If your part only consumes or produces resources in some situation, it's better to implement the complex background update and use the resource request function.\r\n\r\n**How do I distribute a mod that uses BackgroundProcessing?**\r\nHaving multiple copies of the BackgroundProcessing DLL in a GameData directory is fine - only the most recent version will run. If your mod absolutely needs BackgroundProcessing present to be useful, consider including the BackgroundProcessing DLL in your mod's zip file, the same way ModuleManager is handled.\r\n\r\nIf BackgroundProcessing isn't central to your mod, feel free not to distribute it at all. If players don't have this mod installed, they just won't get your off-rails features.\r\n\r\n**Are there any caveats when writing code that uses BackgroundProcessing?**\r\nBackgroundProcessing works optimally with PartModules that are present in prefab parts. The list of modules that has BackgroundProcessing handling is constructed by walking all the AvailablePart objects in PartLoader.LoadedPartLists at the main menu. If your partmodule isn't in that set, very little will work. Similarly, if your PartModule is added to a part's module list after part instantiation, and isn't present in the part's prefab module list, resource handling will likely not work. This is all only relevant if your PartModule is added dynamically to parts, after construction. It isn't relevant to PartModules that are present in config files, or to PartModules added by ModuleManager (which appropriately modifies prefab parts). The takeaway is that if you intend to dynamically add PartModules to parts, and those dynamically-added PartModules should have BackgroundProcessing behaviour, make sure you add them to the appropriate part prefab before the main menu, like ModuleManager."}